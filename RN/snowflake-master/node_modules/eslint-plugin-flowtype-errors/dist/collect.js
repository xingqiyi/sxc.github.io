'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _toArray2 = require('babel-runtime/helpers/toArray');

var _toArray3 = _interopRequireDefault(_toArray2);

exports.default = Collect;

var _flowBin = require('flow-bin');

var _flowBin2 = _interopRequireDefault(_flowBin);

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

var _filter = require('./filter');

var _filter2 = _interopRequireDefault(_filter);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Wrap critical Flow exception into default Error json format
 */
/**
 * Run Flow and collect errors in JSON format
 *
 * Reference the following links for possible bug fixes and optimizations
 * https://github.com/facebook/nuclide/blob/master/pkg/nuclide-flow-rpc/lib/FlowRoot.js
 * https://github.com/ptmt/tryflow/blob/gh-pages/js/worker.js
 */
function fatalError(stderr) {
  return {
    errors: [{
      message: [{
        path: '',
        code: 0,
        line: 0,
        start: 0,
        descr: stderr
      }]
    }]
  };
}

function getFlowBin() {
  return process.env.FLOW_BIN || _flowBin2.default;
}

function executeFlow(stdin, root, filepath) {
  var stdout = void 0;

  switch (stdin && root && filepath && stdin !== '') {
    case true:
      stdout = new _shelljs2.default.ShellString(stdin).exec(['' + getFlowBin(), 'check-contents --json --root', root + ' ' + filepath].join(' '), { silent: true });
      break;
    default:
      stdout = _child_process2.default.spawnSync(getFlowBin(), ['--json']).stdout;
  }

  //
  // This serves as a temporary HACK to prevent 32 bit OS's from failing. Flow does not
  // support 32 bit OS's at the moment.
  // This pretends as if there are now flow errors
  //
  // Ideally, there would be a preinstall npm event to check if the user is on a 32 bit OS
  //

  if (!stdout) {
    return true;
  }

  var stringifiedStdout = stdout.toString();
  var parsedJSONArray = void 0;

  try {
    parsedJSONArray = JSON.parse(stringifiedStdout);
  } catch (e) {
    parsedJSONArray = fatalError(stringifiedStdout);
  }

  // Loop through errors in the file
  var output = parsedJSONArray.errors
  // Temporarily hide the 'inconsistent use of library definitions' issue
  .filter(function (_ref) {
    var message = _ref.message;
    return !message[0].descr.includes('inconsistent use of') && message[0].path === filepath && message[0].descr && message[0].descr !== '';
  }).map(function (_ref2) {
    var message = _ref2.message;

    var _message = (0, _toArray3.default)(message);

    var firstMessage = _message[0];

    var remainingMessages = _message.slice(1);

    var entireMessage = firstMessage.descr + ': ' + remainingMessages.reduce(function (previous, current) {
      return previous + (current.type === 'Blame' ? ' \'' + current.descr + '\' ' : current.descr);
    }, '');

    return (0, _extends3.default)({}, process.env.DEBUG_FLOWTYPE_ERRRORS === 'true' ? parsedJSONArray : {}, {
      message: entireMessage,
      path: firstMessage.path,
      start: firstMessage.loc.start.line,
      end: firstMessage.loc.end.line,
      loc: firstMessage.loc
    });
  });

  return output.length ? (0, _filter2.default)(output) : true;
}

function Collect(stdin, root, filepath) {
  return executeFlow(stdin, root, filepath, {});
}
module.exports = exports['default'];